pipeline {
    agent any
    
    parameters {
        choice(name: 'vcenter', choices: ['vsphere8', 'vsphere7'], description: 'Selecciona el vCenter: Selecciona el vCenter al que deseas conectar')
        choice(name: 'configMaquina', choices: ['small', 'std', 'large', 'extra large'], description: 'Selecciona la configuración de la máquina virtual:')
    }
    
    stages {
        stage('Clonar Repositorio') {
            steps {
                git 'https://tu-repositorio-git-url.git'
            }
        }
        
        stage('Configuración') {
            when {
                expression { params.vcenter == 'vsphere8' }
            }
            steps {
                script {
                    def valorSql = input(message: 'Introduce el valor SQL:', parameters: [string(name: 'valorSql', defaultValue: '')])
                    echo "Valor SQL: ${valorSql}"
                    def ram
                    def cpu
                    switch(params.configMaquina) {
                        case 'small':
                            ram = '2'
                            cpu = '1'
                            break
                        case 'std':
                            ram = '4'
                            cpu = '2'
                            break
                        case 'large':
                            ram = '8'
                            cpu = '4'
                            break
                        case 'extra large':
                            ram = '12'
                            cpu = '8'
                            break
                        default:
                            error "Opción de máquina virtual no válida."
                    }
                    
                    def clusterName = input(message: 'Selecciona el nombre del cluster:', parameters: [choice(name: 'clusterName', choices: ['cluster1', 'cluster2'], description: 'Selecciona el nombre del cluster')])
                    echo "Nombre del cluster: ${clusterName}"
                    
                    def redName = input(message: 'Selecciona el nombre de la red:', parameters: [choice(name: 'redName', choices: ['red1', 'red2'], description: 'Selecciona el nombre de la red')])
                    echo "Nombre de la red: ${redName}"
                    
                    sh "terraform apply -var 'valor_sql=${valorSql}' -var 'ram=${ram}' -var 'cpu=${cpu}' -var 'cluster_name=${clusterName}' -var 'red_name=${redName}'"
                }
            }
        }
    }
}
